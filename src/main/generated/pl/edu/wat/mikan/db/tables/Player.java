/*
 * This file is generated by jOOQ.
 */
package pl.edu.wat.mikan.db.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.edu.wat.mikan.db.Indexes;
import pl.edu.wat.mikan.db.Keys;
import pl.edu.wat.mikan.db.Players;
import pl.edu.wat.mikan.db.tables.records.PlayerRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Player extends TableImpl<PlayerRecord> {

    private static final long serialVersionUID = 1668096583;

    /**
     * The reference instance of <code>Players.player</code>
     */
    public static final Player PLAYER = new Player();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerRecord> getRecordType() {
        return PlayerRecord.class;
    }

    /**
     * The column <code>Players.player.id</code>.
     */
    public final TableField<PlayerRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Players\".player_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>Players.player.name</code>.
     */
    public final TableField<PlayerRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>Players.player.passwordhash</code>.
     */
    public final TableField<PlayerRecord, byte[]> PASSWORDHASH = createField("passwordhash", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>Players.player.isactive</code>.
     */
    public final TableField<PlayerRecord, Boolean> ISACTIVE = createField("isactive", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>Players.player.salt</code>.
     */
    public final TableField<PlayerRecord, byte[]> SALT = createField("salt", org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>Players.player.ipadress</code>.
     */
    public final TableField<PlayerRecord, String> IPADRESS = createField("ipadress", org.jooq.impl.SQLDataType.CHAR(4), this, "");

    /**
     * Create a <code>Players.player</code> table reference
     */
    public Player() {
        this(DSL.name("player"), null);
    }

    /**
     * Create an aliased <code>Players.player</code> table reference
     */
    public Player(String alias) {
        this(DSL.name(alias), PLAYER);
    }

    /**
     * Create an aliased <code>Players.player</code> table reference
     */
    public Player(Name alias) {
        this(alias, PLAYER);
    }

    private Player(Name alias, Table<PlayerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Player(Name alias, Table<PlayerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Player(Table<O> child, ForeignKey<O, PlayerRecord> key) {
        super(child, key, PLAYER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Players.PLAYERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.AK_NAME_PLAYER, Indexes.PK_PLAYER, Indexes.PLAYER_AK_NAME, Indexes.PLAYER_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PlayerRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PLAYER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PlayerRecord> getPrimaryKey() {
        return Keys.PK_PLAYER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PlayerRecord>> getKeys() {
        return Arrays.<UniqueKey<PlayerRecord>>asList(Keys.PK_PLAYER, Keys.AK_NAME_PLAYER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Player as(String alias) {
        return new Player(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Player as(Name alias) {
        return new Player(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Player rename(String name) {
        return new Player(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Player rename(Name name) {
        return new Player(name, null);
    }
}
