/*
 * This file is generated by jOOQ.
 */
package pl.edu.wat.mikan.db.tables.records;


import java.sql.Date;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import pl.edu.wat.mikan.db.tables.Roundresult;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RoundresultRecord extends UpdatableRecordImpl<RoundresultRecord> implements Record4<Long, Date, Short, Short> {

    private static final long serialVersionUID = -593920151;

    /**
     * Setter for <code>Players.roundresult.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>Players.roundresult.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>Players.roundresult.date</code>.
     */
    public void setDate(Date value) {
        set(1, value);
    }

    /**
     * Getter for <code>Players.roundresult.date</code>.
     */
    public Date getDate() {
        return (Date) get(1);
    }

    /**
     * Setter for <code>Players.roundresult.player1points</code>.
     */
    public void setPlayer1points(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>Players.roundresult.player1points</code>.
     */
    public Short getPlayer1points() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>Players.roundresult.player2points</code>.
     */
    public void setPlayer2points(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>Players.roundresult.player2points</code>.
     */
    public Short getPlayer2points() {
        return (Short) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, Date, Short, Short> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Long, Date, Short, Short> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return Roundresult.ROUNDRESULT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Date> field2() {
        return Roundresult.ROUNDRESULT.DATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field3() {
        return Roundresult.ROUNDRESULT.PLAYER1POINTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Short> field4() {
        return Roundresult.ROUNDRESULT.PLAYER2POINTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date component2() {
        return getDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component3() {
        return getPlayer1points();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short component4() {
        return getPlayer2points();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Date value2() {
        return getDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value3() {
        return getPlayer1points();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Short value4() {
        return getPlayer2points();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundresultRecord value1(Long value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundresultRecord value2(Date value) {
        setDate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundresultRecord value3(Short value) {
        setPlayer1points(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundresultRecord value4(Short value) {
        setPlayer2points(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RoundresultRecord values(Long value1, Date value2, Short value3, Short value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RoundresultRecord
     */
    public RoundresultRecord() {
        super(Roundresult.ROUNDRESULT);
    }

    /**
     * Create a detached, initialised RoundresultRecord
     */
    public RoundresultRecord(Long id, Date date, Short player1points, Short player2points) {
        super(Roundresult.ROUNDRESULT);

        set(0, id);
        set(1, date);
        set(2, player1points);
        set(3, player2points);
    }
}
