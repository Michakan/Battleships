/*
 * This file is generated by jOOQ.
 */
package pl.edu.wat.mikan.db.tables;


import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import pl.edu.wat.mikan.db.Indexes;
import pl.edu.wat.mikan.db.Keys;
import pl.edu.wat.mikan.db.Players;
import pl.edu.wat.mikan.db.tables.records.RoundresultRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Roundresult extends TableImpl<RoundresultRecord> {

    private static final long serialVersionUID = 1173139506;

    /**
     * The reference instance of <code>Players.roundresult</code>
     */
    public static final Roundresult ROUNDRESULT = new Roundresult();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RoundresultRecord> getRecordType() {
        return RoundresultRecord.class;
    }

    /**
     * The column <code>Players.roundresult.id</code>.
     */
    public final TableField<RoundresultRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('\"Players\".roundresult_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>Players.roundresult.date</code>.
     */
    public final TableField<RoundresultRecord, Date> DATE = createField("date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>Players.roundresult.player1points</code>.
     */
    public final TableField<RoundresultRecord, Short> PLAYER1POINTS = createField("player1points", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>Players.roundresult.player2points</code>.
     */
    public final TableField<RoundresultRecord, Short> PLAYER2POINTS = createField("player2points", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>Players.roundresult</code> table reference
     */
    public Roundresult() {
        this(DSL.name("roundresult"), null);
    }

    /**
     * Create an aliased <code>Players.roundresult</code> table reference
     */
    public Roundresult(String alias) {
        this(DSL.name(alias), ROUNDRESULT);
    }

    /**
     * Create an aliased <code>Players.roundresult</code> table reference
     */
    public Roundresult(Name alias) {
        this(alias, ROUNDRESULT);
    }

    private Roundresult(Name alias, Table<RoundresultRecord> aliased) {
        this(alias, aliased, null);
    }

    private Roundresult(Name alias, Table<RoundresultRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Roundresult(Table<O> child, ForeignKey<O, RoundresultRecord> key) {
        super(child, key, ROUNDRESULT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Players.PLAYERS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PK_ROUNDRESULT, Indexes.ROUNDRESULT_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RoundresultRecord, Long> getIdentity() {
        return Keys.IDENTITY_ROUNDRESULT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RoundresultRecord> getPrimaryKey() {
        return Keys.PK_ROUNDRESULT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RoundresultRecord>> getKeys() {
        return Arrays.<UniqueKey<RoundresultRecord>>asList(Keys.PK_ROUNDRESULT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Roundresult as(String alias) {
        return new Roundresult(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Roundresult as(Name alias) {
        return new Roundresult(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Roundresult rename(String name) {
        return new Roundresult(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Roundresult rename(Name name) {
        return new Roundresult(name, null);
    }
}
